<div class="max-w-7xl mx-auto">
  <div class="px-4 py-6 sm:px-6 lg:px-8">
    <!-- Document Header -->
    <div class="mb-8">
      <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-4">
        <div class="flex-1">
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2" title="<%= @document.title %>">
            <% if @document.title.length > 20 %>
              <%= @document.title[0..24] %>...
            <% else %>
              <%= @document.title %>
            <% end %>
          </h1>
          <p class="text-sm text-gray-600 dark:text-gray-400 mb-4">
            Uploaded <%= time_ago_in_words(@document.created_at) %> ago
          </p>
          <div class="flex items-center gap-4">
            <span class="status-badge status-<%= @document.status %>">
              <%= @document.status.titleize %>
            </span>
          </div>
        </div>
        <div class="flex-shrink-0">
          <%= link_to documents_path,
              class: "inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800 transition-all duration-200" do %>
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to Documents
          <% end %>
        </div>
      </div>

      <% if @document.completed? %>
        <div class="mt-4 grid grid-cols-1 gap-4 sm:grid-cols-3">
          <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700">
            <dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Pages</dt>
            <dd class="mt-1 text-3xl font-semibold text-gray-900 dark:text-white"><%= @document.page_count %></dd>
          </div>
          <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700">
            <dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Chunks</dt>
            <dd class="mt-1 text-3xl font-semibold text-gray-900 dark:text-white"><%= @document.chunk_count %></dd>
          </div>
          <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700">
            <dt class="text-sm font-medium text-gray-500 dark:text-gray-400">AI Events</dt>
            <dd class="mt-1 text-3xl font-semibold text-gray-900 dark:text-white"><%= @document.ai_events.count %></dd>
          </div>
        </div>
      <% end %>
    </div>

    <% if @document.processing? %>
      <!-- Processing State -->
      <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-6">
        <div class="flex items-center">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mr-4"></div>
          <div>
            <h3 class="text-lg font-medium text-blue-900 dark:text-blue-100">Processing Document</h3>
            <p class="text-blue-700 dark:text-blue-300">Your document is being processed. This may take a few minutes.</p>
          </div>
        </div>
      </div>
    <% elsif @document.completed? %>
      <!-- AI Interaction Section -->
      <div class="space-y-8">
        <!-- AI Actions -->
        <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-6">
          <h2 class="text-lg font-medium text-gray-900 dark:text-white mb-4">AI Analysis</h2>
          <div class="grid grid-cols-1 gap-4 sm:grid-cols-3">
            <%= button_to summarize_ai_document_path(@document), method: :post,
                class: "ai-action-btn flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 cursor-pointer transition-all duration-200",
                data: { action: "summarize" } do %>
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              <span class="btn-text">Summarize & Risks</span>
              <svg class="loading-spinner hidden w-4 h-4 ml-2 animate-spin" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            <% end %>

            <%= button_to redlines_ai_document_path(@document), method: :post,
                class: "ai-action-btn flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 cursor-pointer transition-all duration-200",
                data: { action: "redlines" } do %>
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
              </svg>
              <span class="btn-text">Propose Redlines</span>
              <svg class="loading-spinner hidden w-4 h-4 ml-2 animate-spin" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            <% end %>

            <button
              onclick="document.getElementById('question-modal').classList.remove('hidden')"
              class="ai-action-btn flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 cursor-pointer transition-all duration-200"
              data-action="question"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span class="btn-text">Ask Question</span>
              <svg class="loading-spinner hidden w-4 h-4 ml-2 animate-spin" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </button>
          </div>

          <!-- Loading Message -->
          <div id="ai-loading-message" class="hidden mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-md">
            <div class="flex items-center">
              <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-600 dark:text-blue-400" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <span class="text-sm text-blue-700 dark:text-blue-300" id="loading-message-text">Processing your request...</span>
            </div>
          </div>
        </div>

        <!-- Question Modal -->
        <div id="question-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700">
            <div class="mt-3">
              <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Ask a Question</h3>
              <%= form_with url: answer_ai_document_path(@document), method: :post, local: true do |form| %>
                <%= form.text_area :question,
                    placeholder: "What would you like to know about this document?",
                    class: "form-input w-full h-32 resize-none",
                    required: true %>
                <div class="mt-4 flex justify-end space-x-3">
                  <button
                    type="button"
                    onclick="document.getElementById('question-modal').classList.add('hidden')"
                    class="btn-secondary"
                  >
                    Cancel
                  </button>
                  <%= form.submit "Ask Question",
                      class: "ai-action-btn btn-primary cursor-pointer flex items-center",
                      data: { action: "question" } do %>
                    <span class="btn-text">Ask Question</span>
                    <svg class="loading-spinner hidden w-4 h-4 ml-2 animate-spin" fill="none" viewBox="0 0 24 24">
                      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                  <% end %>
                </div>
              <% end %>
            </div>
          </div>
        </div>
      </div>

      <!-- AI Events History -->
      <div class="mt-8 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-6">
        <h2 class="text-lg font-medium text-gray-900 dark:text-white mb-4">AI Activity</h2>
        <div class="space-y-4">
          <% @document.ai_events.recent.limit(10).each do |event| %>
            <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600">
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" />
                  </svg>
                </div>
                <div class="ml-3">
                  <p class="text-sm font-medium text-gray-900 dark:text-white">
                    <%= event.event_type.titleize %>
                  </p>
                  <p class="text-sm text-gray-500 dark:text-gray-400">
                    <%= event.model %> • <%= pluralize(event.tokens_used, 'token') %> • <%= event.latency_seconds.round(2) %>s
                  </p>
                </div>
              </div>
              <div class="text-sm text-gray-500 dark:text-gray-400">
                <%= time_ago_in_words(event.created_at) %> ago
              </div>
            </div>
          <% end %>
        </div>
      </div>
    <% elsif @document.failed? %>
      <!-- Failed State -->
      <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6">
        <div class="flex items-center">
          <svg class="w-8 h-8 text-red-600 dark:text-red-400 mr-4" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
          <div>
            <h3 class="text-lg font-medium text-red-900 dark:text-red-100">Processing Failed</h3>
            <p class="text-red-700 dark:text-red-300">There was an error processing your document. Please try uploading again.</p>
          </div>
        </div>
      </div>
    <% end %>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Track which button is currently in loading state
  let currentLoadingButton = null;

  // Listen for form submissions instead of button clicks
  document.addEventListener('submit', function(e) {
    const form = e.target;
    const submitButton = form.querySelector('input[type="submit"], button[type="submit"]');

    if (submitButton && submitButton.classList.contains('ai-action-btn')) {
      e.preventDefault(); // Prevent immediate submission

      const action = submitButton.dataset.action || 'processing';

      // STEP 1: Reset ALL buttons to normal state first
      resetAllButtonsToNormal();

      // STEP 2: Apply loading state ONLY to the clicked button
      applyLoadingStateToButton(submitButton, action);

      // STEP 3: Disable other buttons (but keep them in normal state)
      disableOtherButtons(submitButton);

      // Submit the form after a short delay to show loading states
      setTimeout(() => {
        form.submit();
      }, 300);
    }
  });

  // Handle question form submission
  const questionForm = document.querySelector('#question-modal form');
  if (questionForm) {
    questionForm.addEventListener('submit', function(e) {
      const submitBtn = this.querySelector('input[type="submit"]');
      if (submitBtn) {
        // Reset all buttons first
        resetAllButtonsToNormal();

        // Apply loading state only to this button
        applyLoadingStateToButton(submitBtn, 'question');

        // Disable other buttons
        disableOtherButtons(submitBtn);

        // Close modal after a short delay to show loading state
        setTimeout(() => {
          document.getElementById('question-modal').classList.add('hidden');
        }, 100);
      }
    });
  }

  function resetAllButtonsToNormal() {
    // Reset ALL buttons to their normal state
    const allButtons = document.querySelectorAll('.ai-action-btn');
    allButtons.forEach(button => {
      // Reset text to original
      const btnText = button.querySelector('.btn-text');
      if (btnText) {
        if (button.dataset.action === 'summarize') {
          btnText.textContent = 'Summarize & Risks';
        } else if (button.dataset.action === 'redlines') {
          btnText.textContent = 'Propose Redlines';
        } else if (button.dataset.action === 'question') {
          btnText.textContent = 'Ask Question';
        }
      }

      // Hide ALL loading spinners
      const loadingSpinner = button.querySelector('.loading-spinner');
      if (loadingSpinner) {
        loadingSpinner.classList.add('hidden');
      }

      // Remove ALL loading-related classes
      button.classList.remove('loading', 'opacity-50', 'opacity-75', 'cursor-not-allowed', 'cursor-wait');

      // Re-enable all buttons
      button.disabled = false;
    });

    // Hide loading message
    hideLoadingMessage();
  }

  function applyLoadingStateToButton(button, action) {
    // This function ONLY affects the specific button passed to it
    if (!button || !button.classList.contains('ai-action-btn')) {
      return;
    }

    const btnText = button.querySelector('.btn-text');
    const loadingSpinner = button.querySelector('.loading-spinner');

    if (btnText && loadingSpinner) {
      // Store original text
      button.dataset.originalText = btnText.textContent;

      // Update button text and show spinner ONLY for this button
      btnText.textContent = getLoadingText(action);
      loadingSpinner.classList.remove('hidden');

      // Add loading class ONLY to this button
      button.classList.add('loading');

      // Show loading message for this specific action
      showLoadingMessage(action);
    }
  }

  function disableOtherButtons(clickedButton) {
    const allButtons = document.querySelectorAll('.ai-action-btn');
    allButtons.forEach(button => {
      if (button !== clickedButton) {
        // Disable other buttons but keep them in normal state
        button.disabled = true;
        button.classList.add('opacity-50', 'cursor-not-allowed');

        // CRITICAL: Ensure other buttons have NO loading states
        const otherSpinner = button.querySelector('.loading-spinner');
        if (otherSpinner) {
          otherSpinner.classList.add('hidden');
        }

        // Remove any loading classes that might have been applied
        button.classList.remove('loading');

        // Ensure other buttons show their normal text (not loading text)
        const otherBtnText = button.querySelector('.btn-text');
        if (otherBtnText) {
          if (button.dataset.action === 'summarize') {
            otherBtnText.textContent = 'Summarize & Risks';
          } else if (button.dataset.action === 'redlines') {
            otherBtnText.textContent = 'Propose Redlines';
          } else if (button.dataset.action === 'question') {
            otherBtnText.textContent = 'Ask Question';
          }
        }
      }
    });
  }

  function showLoadingMessage(action) {
    const loadingMessage = document.getElementById('ai-loading-message');
    const loadingText = document.getElementById('loading-message-text');

    if (loadingMessage && loadingText) {
      const messageText = getLoadingMessageText(action);
      loadingText.textContent = messageText;

      // Remove hidden class
      loadingMessage.classList.remove('hidden');
    }
  }

  function hideLoadingMessage() {
    const loadingMessage = document.getElementById('ai-loading-message');
    if (loadingMessage) {
      loadingMessage.classList.add('hidden');
    }
  }

  function getLoadingText(action) {
    const loadingTexts = {
      'summarize': 'Analyzing...',
      'redlines': 'Processing...',
      'question': 'Searching...',
      'processing': 'Processing...'
    };
    return loadingTexts[action] || 'Processing...';
  }

  function getLoadingMessageText(action) {
    const messageTexts = {
      'summarize': 'Analyzing document and identifying risks. This may take a few minutes...',
      'redlines': 'Analyzing document for improvements and generating redlines...',
      'question': 'Searching for answer to your question...',
      'processing': 'Processing your request. Please wait...'
    };
    return messageTexts[action] || 'Processing your request. Please wait...';
  }
});
</script>