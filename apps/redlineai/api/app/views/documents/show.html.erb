<div class="max-w-7xl mx-auto">
  <div class="px-4 py-6 sm:px-6 lg:px-8">
    <!-- Document Header -->
    <div class="mb-8">
      <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-4">
        <div class="flex-1">
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2" title="<%= @document.title %>">
            <% if @document.title.length > 20 %>
              <%= @document.title[0..24] %>...
            <% else %>
              <%= @document.title %>
            <% end %>
          </h1>
          <p class="text-sm text-gray-600 dark:text-gray-400 mb-4">
            Uploaded <%= time_ago_in_words(@document.created_at) %> ago
          </p>
          <div class="flex items-center gap-4">
            <span class="status-badge status-<%= @document.status %>">
              <%= @document.status.titleize %>
            </span>
          </div>
        </div>
        <div class="flex-shrink-0">
          <%= link_to documents_path,
              class: "inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800 transition-all duration-200" do %>
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to Documents
          <% end %>
        </div>
      </div>

      <% if @document.completed? %>
                <!-- Document Summary -->
        <div class="mt-4 bg-gray-50 dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700">
          <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400 mb-4">Document Summary</h3>
          <div class="grid grid-cols-2 sm:grid-cols-4 gap-6">
            <!-- Pages -->
            <div class="text-center">
              <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 mb-1">Pages</dt>
              <dd class="text-2xl font-semibold text-gray-900 dark:text-white"><%= @document.page_count %></dd>
            </div>

            <!-- File Size -->
            <div class="text-center">
              <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 mb-1">File Size</dt>
              <dd class="text-2xl font-semibold text-gray-900 dark:text-white">
                <% if @document.file.attached? && @document.file.byte_size.present? %>
                  <%= number_to_human_size(@document.file.byte_size) %>
                <% else %>
                  N/A
                <% end %>
              </dd>
            </div>

            <!-- Words -->
            <div class="text-center">
              <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 mb-1">Words</dt>
              <dd class="text-2xl font-semibold text-gray-900 dark:text-white"><%= number_with_delimiter(@document.word_count) %></dd>
            </div>

            <!-- AI Insights -->
            <div class="text-center">
              <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 mb-1">AI Insights</dt>
              <dd class="text-2xl font-semibold text-gray-900 dark:text-white"><%= @document.ai_events.count %></dd>
            </div>
          </div>

          <!-- Additional Info Row -->
          <div class="mt-6 grid grid-cols-1 sm:grid-cols-3 gap-4 pt-4 border-t border-gray-200 dark:border-gray-600">
            <div class="text-center">
              <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 mb-1">File Type</dt>
              <dd class="text-lg font-medium text-gray-900 dark:text-white"><%= @document.file_type.upcase %></dd>
            </div>
            <div class="text-center">
              <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 mb-1">Processing Time</dt>
              <dd class="text-lg font-medium text-gray-900 dark:text-white">
                <% if document_processing_time(@document) %>
                  <%= document_processing_time(@document) %>
                <% else %>
                  N/A
                <% end %>
              </dd>
            </div>
            <div class="text-center">
              <dt class="text-sm font-medium text-gray-500 dark:text-gray-400 mb-1">Status</dt>
              <dd class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                Ready for AI Analysis
              </dd>
            </div>
          </div>
        </div>
      <% end %>
    </div>

    <% if @document.processing? %>
      <!-- Processing State -->
      <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-6">
        <div class="flex items-center">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mr-4"></div>
          <div>
            <h3 class="text-lg font-medium text-blue-900 dark:text-blue-100">Processing Document</h3>
            <p class="text-blue-700 dark:text-blue-300">Your document is being processed. This may take a few minutes.</p>
          </div>
        </div>
      </div>
    <% elsif @document.completed? %>
      <!-- AI Interaction Section -->
      <div class="space-y-8">
        <!-- AI Actions -->
        <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-6">
          <h2 class="text-lg font-medium text-gray-900 dark:text-white mb-4">AI Analysis</h2>
          <div class="grid grid-cols-1 gap-4 sm:grid-cols-3">
            <%= button_to summarize_ai_document_path(@document), method: :post,
                class: "ai-action-btn flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 cursor-pointer transition-all duration-200",
                data: { action: "summarize" } do %>
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              <span class="btn-text">Summarize & Risks</span>
              <svg class="loading-spinner hidden w-4 h-4 ml-2 animate-spin" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            <% end %>

            <%= button_to redlines_ai_document_path(@document), method: :post,
                class: "ai-action-btn flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 cursor-pointer transition-all duration-200",
                data: { action: "redlines" } do %>
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
              </svg>
              <span class="btn-text">Propose Redlines</span>
              <svg class="loading-spinner hidden w-4 h-4 ml-2 animate-spin" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            <% end %>

            <%= link_to chat_document_path(@document),
                class: "ai-action-btn flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 cursor-pointer transition-all duration-200" do %>
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
              </svg>
              <span class="btn-text">Chat with AI</span>
            <% end %>
          </div>

          <!-- Loading Message -->
          <div id="ai-loading-message" class="hidden mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-md">
            <div class="flex items-center">
              <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-600 dark:text-blue-400" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <span class="text-sm text-blue-700 dark:text-blue-300" id="loading-message-text">Processing your request...</span>
            </div>
          </div>
        </div>

        <!-- Chat Link Info -->
        <div class="mt-4 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-blue-600 dark:text-blue-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
            </svg>
            <div>
              <p class="text-sm text-blue-800 dark:text-blue-200">
                <strong>New!</strong> Use our enhanced chat interface for better conversations with AI.
              </p>
              <p class="text-xs text-blue-700 dark:text-blue-300 mt-1">
                Ask follow-up questions, see conversation history, and get context-aware responses.
              </p>
            </div>
          </div>
        </div>
      </div>

      <!-- AI Activity History -->
      <div class="mt-8 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-6">
        <h2 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Recent AI Analysis</h2>
        <div class="space-y-4">
          <% @document.ai_events.recent.limit(5).each do |event| %>
            <div class="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600">
              <div class="flex items-start">
                <div class="flex-shrink-0 mt-1">
                  <% case event.event_type %>
                  <% when 'summarization' %>
                    <svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" />
                    </svg>
                  <% when 'question_answering' %>
                    <svg class="w-5 h-5 text-green-600 dark:text-green-400" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                    </svg>
                  <% when 'redlining' %>
                    <svg class="w-5 h-5 text-purple-600 dark:text-purple-400" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" clip-rule="evenodd" />
                    </svg>
                  <% else %>
                    <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" />
                    </svg>
                  <% end %>
                </div>
                <div class="ml-3 flex-1">
                  <div class="flex items-center justify-between mb-2">
                    <h4 class="text-sm font-medium text-gray-900 dark:text-white">
                      <% case event.event_type %>
                      <% when 'summarization' %>
                        Document Summary Generated
                      <% when 'question_answering' %>
                        Question Analysis
                      <% when 'redlining' %>
                        Redlines & Improvements
                      <% when 'embedding' %>
                        Document Indexed for Search
                      <% else %>
                        <%= event.event_type.titleize %>
                      <% end %>
                    </h4>
                    <span class="text-xs text-gray-500 dark:text-gray-400">
                      <%= time_ago_in_words(event.created_at) %> ago
                    </span>
                  </div>

                  <!-- Show relevant preview based on event type -->
                  <% case event.event_type %>
                  <% when 'summarization' %>
                    <p class="text-sm text-gray-600 dark:text-gray-300">
                      Document analyzed for key insights and risk identification
                    </p>
                  <% when 'question_answering' %>
                    <% if event.metadata&.dig('conversation_id') && event.metadata&.dig('message_id') %>
                      <%
                        # Try to get the actual question from the conversation
                        conversation = Conversation.find_by(id: event.metadata['conversation_id'])
                        user_message = conversation&.messages&.where(role: 'user')&.order(:created_at)&.last
                        question_preview = user_message&.content&.truncate(80)
                      %>
                      <% if question_preview %>
                        <p class="text-sm text-gray-600 dark:text-gray-300">
                          <strong>Q:</strong> "<%= question_preview %>"
                        </p>
                      <% else %>
                        <p class="text-sm text-gray-600 dark:text-gray-300">
                          AI provided detailed answer with document citations
                        </p>
                      <% end %>
                    <% else %>
                      <p class="text-sm text-gray-600 dark:text-gray-300">
                        AI provided detailed answer with document citations
                      </p>
                    <% end %>
                  <% when 'redlining' %>
                    <p class="text-sm text-gray-600 dark:text-gray-300">
                      Suggested improvements and edits for clarity and compliance
                    </p>
                  <% when 'embedding' %>
                    <p class="text-sm text-gray-600 dark:text-gray-300">
                      Document content indexed for AI-powered search and analysis
                    </p>
                  <% else %>
                    <p class="text-sm text-gray-600 dark:text-gray-300">
                      AI analysis completed successfully
                    </p>
                  <% end %>
                </div>
              </div>
            </div>
          <% end %>
        </div>

        <% if @document.ai_events.count > 5 %>
          <div class="mt-4 text-center">
            <button id="show-all-analyses" class="text-blue-600 dark:text-blue-400 hover:underline text-sm" data-analyses-count="<%= @document.ai_events.count %>">
              Show all <%= @document.ai_events.count %> analyses
            </button>
          </div>

          <!-- Hidden analyses that will be shown when expanded -->
          <div id="all-analyses" class="hidden mt-4 space-y-4">
            <% @document.ai_events.recent.offset(5).each do |event| %>
              <div class="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600">
                <div class="flex items-start">
                  <div class="flex-shrink-0 mt-1">
                    <% case event.event_type %>
                    <% when 'summarization' %>
                      <svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" />
                      </svg>
                    <% when 'question_answering' %>
                      <svg class="w-5 h-5 text-green-600 dark:text-green-400" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                      </svg>
                    <% when 'redlining' %>
                      <svg class="w-5 h-5 text-purple-600 dark:text-purple-400" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" clip-rule="evenodd" />
                      </svg>
                    <% else %>
                      <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" />
                      </svg>
                    <% end %>
                  </div>
                  <div class="ml-3 flex-1">
                    <div class="flex items-center justify-between mb-2">
                      <h4 class="text-sm font-medium text-gray-900 dark:text-white">
                        <% case event.event_type %>
                        <% when 'summarization' %>
                          Document Summary Generated
                        <% when 'question_answering' %>
                          Question Analysis
                        <% when 'redlining' %>
                          Redlines & Improvements
                        <% when 'embedding' %>
                          Document Indexed for Search
                        <% else %>
                          <%= event.event_type.titleize %>
                        <% end %>
                      </h4>
                      <span class="text-xs text-gray-500 dark:text-gray-400">
                        <%= time_ago_in_words(event.created_at) %> ago
                      </span>
                    </div>

                    <!-- Show relevant preview based on event type -->
                    <% case event.event_type %>
                    <% when 'summarization' %>
                      <p class="text-sm text-gray-600 dark:text-gray-300">
                        Document analyzed for key insights and risk identification
                      </p>
                    <% when 'question_answering' %>
                      <% if event.metadata&.dig('conversation_id') && event.metadata&.dig('message_id') %>
                        <%
                          # Try to get the actual question from the conversation
                          conversation = Conversation.find_by(id: event.metadata['conversation_id'])
                          user_message = conversation&.messages&.where(role: 'user')&.order(:created_at)&.last
                          question_preview = user_message&.content&.truncate(80)
                        %>
                        <% if question_preview %>
                          <p class="text-sm text-gray-600 dark:text-gray-300">
                            <strong>Q:</strong> "<%= question_preview %>"
                          </p>
                        <% else %>
                          <p class="text-sm text-gray-600 dark:text-gray-300">
                            AI provided detailed answer with document citations
                          </p>
                        <% end %>
                      <% else %>
                        <p class="text-sm text-gray-600 dark:text-gray-300">
                          AI provided detailed answer with document citations
                        </p>
                      <% end %>
                    <% when 'redlining' %>
                      <p class="text-sm text-gray-600 dark:text-gray-300">
                        Suggested improvements and edits for clarity and compliance
                      </p>
                    <% when 'embedding' %>
                      <p class="text-sm text-gray-600 dark:text-gray-300">
                        Document content indexed for AI-powered search and analysis
                      </p>
                    <% else %>
                      <p class="text-sm text-gray-600 dark:text-gray-300">
                        AI analysis completed successfully
                      </p>
                    <% end %>
                  </div>
                </div>
              </div>
            <% end %>
          </div>
        <% end %>
      </div>
    <% elsif @document.failed? %>
      <!-- Failed State -->
      <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6">
        <div class="flex items-center">
          <svg class="w-8 h-8 text-red-600 dark:text-red-400 mr-4" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
          <div>
            <h3 class="text-lg font-medium text-red-900 dark:text-red-100">Processing Failed</h3>
            <p class="text-red-700 dark:text-red-300">There was an error processing your document. Please try uploading again.</p>
          </div>
        </div>
      </div>
    <% end %>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Track which button is currently in loading state
  let currentLoadingButton = null;

  // Listen for form submissions instead of button clicks
  document.addEventListener('submit', function(e) {
    const form = e.target;
    const submitButton = form.querySelector('input[type="submit"], button[type="submit"]');

    if (submitButton && submitButton.classList.contains('ai-action-btn')) {
      e.preventDefault(); // Prevent immediate submission

      const action = submitButton.dataset.action || 'processing';

      // STEP 1: Reset ALL buttons to normal state first
      resetAllButtonsToNormal();

      // STEP 2: Apply loading state ONLY to the clicked button
      applyLoadingStateToButton(submitButton, action);

      // STEP 3: Disable other buttons (but keep them in normal state)
      disableOtherButtons(submitButton);

      // Submit the form after a short delay to show loading states
      setTimeout(() => {
        form.submit();
      }, 300);
    }
  });

  // Handle question form submission
  const questionForm = document.querySelector('#question-modal form');
  if (questionForm) {
    questionForm.addEventListener('submit', function(e) {
      const submitBtn = this.querySelector('input[type="submit"]');
      if (submitBtn) {
        // Reset all buttons first
        resetAllButtonsToNormal();

        // Apply loading state only to this button
        applyLoadingStateToButton(submitBtn, 'question');

        // Disable other buttons
        disableOtherButtons(submitBtn);

        // Close modal after a short delay to show loading state
        setTimeout(() => {
          document.getElementById('question-modal').classList.add('hidden');
        }, 100);
      }
    });
  }

  function resetAllButtonsToNormal() {
    // Reset ALL buttons to their normal state
    const allButtons = document.querySelectorAll('.ai-action-btn');
    allButtons.forEach(button => {
      // Reset text to original
      const btnText = button.querySelector('.btn-text');
      if (btnText) {
        if (button.dataset.action === 'summarize') {
          btnText.textContent = 'Summarize & Risks';
        } else if (button.dataset.action === 'redlines') {
          btnText.textContent = 'Propose Redlines';
        } else if (button.dataset.action === 'question') {
          btnText.textContent = 'Ask Question';
        }
      }

      // Hide ALL loading spinners
      const loadingSpinner = button.querySelector('.loading-spinner');
      if (loadingSpinner) {
        loadingSpinner.classList.add('hidden');
      }

      // Remove ALL loading-related classes
      button.classList.remove('loading', 'opacity-50', 'opacity-75', 'cursor-not-allowed', 'cursor-wait');

      // Re-enable all buttons
      button.disabled = false;
    });

    // Hide loading message
    hideLoadingMessage();
  }

  function applyLoadingStateToButton(button, action) {
    // This function ONLY affects the specific button passed to it
    if (!button || !button.classList.contains('ai-action-btn')) {
      return;
    }

    const btnText = button.querySelector('.btn-text');
    const loadingSpinner = button.querySelector('.loading-spinner');

    if (btnText && loadingSpinner) {
      // Store original text
      button.dataset.originalText = btnText.textContent;

      // Update button text and show spinner ONLY for this button
      btnText.textContent = getLoadingText(action);
      loadingSpinner.classList.remove('hidden');

      // Add loading class ONLY to this button
      button.classList.add('loading');

      // Show loading message for this specific action
      showLoadingMessage(action);
    }
  }

  function disableOtherButtons(clickedButton) {
    const allButtons = document.querySelectorAll('.ai-action-btn');
    allButtons.forEach(button => {
      if (button !== clickedButton) {
        // Disable other buttons but keep them in normal state
        button.disabled = true;
        button.classList.add('opacity-50', 'cursor-not-allowed');

        // CRITICAL: Ensure other buttons have NO loading states
        const otherSpinner = button.querySelector('.loading-spinner');
        if (otherSpinner) {
          otherSpinner.classList.add('hidden');
        }

        // Remove any loading classes that might have been applied
        button.classList.remove('loading');

        // Ensure other buttons show their normal text (not loading text)
        const otherBtnText = button.querySelector('.btn-text');
        if (otherBtnText) {
          if (button.dataset.action === 'summarize') {
            otherBtnText.textContent = 'Summarize & Risks';
          } else if (button.dataset.action === 'redlines') {
            otherBtnText.textContent = 'Propose Redlines';
          } else if (button.dataset.action === 'question') {
            otherBtnText.textContent = 'Ask Question';
          }
        }
      }
    });
  }

  function showLoadingMessage(action) {
    const loadingMessage = document.getElementById('ai-loading-message');
    const loadingText = document.getElementById('loading-message-text');

    if (loadingMessage && loadingText) {
      const messageText = getLoadingMessageText(action);
      loadingText.textContent = messageText;

      // Remove hidden class
      loadingMessage.classList.remove('hidden');
    }
  }

  function hideLoadingMessage() {
    const loadingMessage = document.getElementById('ai-loading-message');
    if (loadingMessage) {
      loadingMessage.classList.add('hidden');
    }
  }

  function getLoadingText(action) {
    const loadingTexts = {
      'summarize': 'Analyzing...',
      'redlines': 'Processing...',
      'question': 'Searching...',
      'processing': 'Processing...'
    };
    return loadingTexts[action] || 'Processing...';
  }

  function getLoadingMessageText(action) {
    const messageTexts = {
      'summarize': 'Analyzing document and identifying risks. This may take a few minutes...',
      'redlines': 'Analyzing document for improvements and generating redlines...',
      'question': 'Searching for answer to your question...',
      'processing': 'Processing your request. Please wait...'
    };
    return messageTexts[action] || 'Processing your request. Please wait...';
  }
});

// Function to initialize the show all analyses toggle (GLOBAL SCOPE)
function initializeShowAllAnalysesToggle() {
  const showAllButton = document.getElementById('show-all-analyses');
  const allAnalyses = document.getElementById('all-analyses');

  if (showAllButton && allAnalyses) {
    // Remove any existing event listeners to prevent duplicates
    const newButton = showAllButton.cloneNode(true);
    showAllButton.parentNode.replaceChild(newButton, showAllButton);

    newButton.addEventListener('click', function() {
      if (allAnalyses.classList.contains('hidden')) {
        // Show all analyses
        allAnalyses.classList.remove('hidden');
        newButton.textContent = 'Show less';
        newButton.classList.add('text-gray-600', 'dark:text-gray-400');
        newButton.classList.remove('text-blue-600', 'dark:text-blue-400');
      } else {
        // Hide analyses
        allAnalyses.classList.add('hidden');
        newButton.textContent = `Show all ${newButton.dataset.analysesCount} analyses`;
        newButton.classList.remove('text-gray-600', 'dark:text-gray-400');
        newButton.classList.add('text-blue-600', 'dark:text-blue-400');
      }
    });
  } else {
    console.log('Show all analyses elements not found:', {
      button: !!showAllButton,
      analyses: !!allAnalyses
    });
  }
}

// Initialize on DOM content loaded
document.addEventListener('DOMContentLoaded', initializeShowAllAnalysesToggle);

// Also initialize on window load as a fallback
window.addEventListener('load', initializeShowAllAnalysesToggle);

// Initialize immediately if DOM is already ready
if (document.readyState === 'loading') {
  // DOM is still loading, wait for DOMContentLoaded
} else {
  // DOM is already ready, initialize immediately
  initializeShowAllAnalysesToggle();
}
</script>